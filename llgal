#!/usr/bin/perl

use FileHandle;
use Getopt::Long;
use Image::Size;
use strict ;
no strict "refs" ;

Getopt::Long::Configure('noignorecase', 'noautoabbrev', 'bundling') ;
STDOUT->autoflush("1");

######################################################################
# store command-line options upfront to write in the index <HEAD>
my @llgal_options = @ARGV;

######################################################################
# process general command-line options

my $destination_dir = "." ;	# look in current directory "."
my $force_regen_asked = 0 ;	# force thumbnail regeneration
my $help_asked = 0 ;		# displays brief usage message
my $clean_asked = 0 ;		# clean up all generated files
my $cleanall_asked = 0 ;	# clean up all generated and user modified files
my $generate_config = undef ;   # generate a config file

# process these options but kept other options in @ARGV for later
Getopt::Long::Configure('passthrough') ;
GetOptions(
	   'clean'	=> \$clean_asked,
	   'cleanall'	=> \$cleanall_asked,
	   'd=s' 	=> \$destination_dir,
	   'f'		=> \$force_regen_asked,
	   'h|help'	=> \$help_asked,
	   'gencfg=s'   => \$generate_config,
	) ;

# restore default behavior: process all options and warn on error
Getopt::Long::Configure('nopassthrough') ;

# strip any unnecessary slashes from the end of the given $destination_dir directory
$destination_dir =~ s/\/$// ;

######################################################################
# configuration files

my @config_files = () ;
push (@config_files, "/etc/llgalrc") ;
push (@config_files, $ENV{HOME}."/.llgalrc") ;
push (@config_files, "$destination_dir/.llgalrc") unless ($destination_dir eq ".") ;
push (@config_files, ".llgalrc") ;

my @additional_config_files = () ;

Getopt::Long::Configure('passthrough') ;
GetOptions(
	   'config=s'   => \@additional_config_files,
	) ;
Getopt::Long::Configure('nopassthrough') ;

######################################################################
# default values that will be restored if the associated option is set to -1

my $thumbnail_width_max_default = 0 ; # unlimited
my $thumbnail_height_max_default = 75 ;
my $thumbnails_per_row_default = 5 ;
my $pixels_per_row_default = 0 ; # unlimited
my $index_cellpadding_default = 3 ;
my $tile_height_default = 21 ;
my $text_slide_width_default = 400 ;
my $text_slide_height_default = 300 ;
my $slide_height_max_default = 0 ; # unlimited

######################################################################
# all configuration variables

# llgal directories
my $llgal_share_dir = "/usr/share/llgal" ;
my $user_share_dir = $ENV{HOME}."/.llgal" ;

# Name of generic llgal files
my $css_filename = "llgal.css" ;
my $filmtile_filename = "tile.png" ;
my $indextemplate_filename = "indextemplate.html" ;
my $slidetemplate_filename = "slidetemplate.html" ;

# Location and name of generated files
my $local_llgal_dir = ".llgal.files" ;
my $slide_filenameprefix = "slide_" ;
my $thumb_filenameprefix = "thumb_" ;

# Index
# name of the index file (-i)
my $index_filename = "index.html" ;
# title of the gallery (--title)
my $index_title = "Index of pictures" ;
# cellpadding value for the thumbnail index tables (-p)
my $index_cellpadding = $index_cellpadding_default ;
# how many pixels per row ar most in index (-wx)
my $pixels_per_row = $pixels_per_row_default ;

# Film effects
# omit the film reel effect altogether (-r)
my $no_film_effect = 0 ;
# height of the tile.png tiled image (-t)
my $tile_height = $tile_height_default ;

# Thumbnails
# max height of a thumbnail (-xy or -y)
my $thumbnail_height_max = $thumbnail_height_max_default ;
# scale thumb longer dimension (-xy)
my $thumbnail_width_max = $thumbnail_width_max_default ;
# how many thumbnails per row at most in index (-w)
my $thumbnails_per_row = $thumbnails_per_row_default ;

# Slides
# make no slides, just thumbnail links to images (-s)
my $make_no_slides = 0 ;
# omit the image slide from the caption (-x)
my $no_slide_counter = 0 ;
# max height of the slides (--bigy)
my $slide_height_max = $slide_height_max_default ;
# use image names as slide names (-n)
my $slidename_from_filename = 0 ;
# use captions as slide titles (-k)
my $slidetitle_from_caption = 0 ;
# default text slide width
my $text_slide_width = $text_slide_width_default ;
# default text slide height
my $text_slide_height = $text_slide_height_default ;

# Captions
my $captions_filename = "captions" ;
# use exiftags as captions (--ce)
my $caption_from_exif = 0 ;
# preserve image names as captions (-C)
my $caption_from_filename = 0 ;
# this line will be placed in caption generated file
# the user may remove it to prevent llgal from removing the caption file with -clean
my $caption_removal_line = "REMOVE THIS LINE IF LLGAL SHOULD NOT REMOVE THIS FILE" ;
# write captions under thumbnails on index page (-u)
my $caption_under_thumbnails = 0 ;
# to write image dimensions (-a or -ad)
my $show_dimensions = 0 ;
# to write image size (-a or -as)
my $show_size = 0 ;
# change kB to another unit (-asu)
my $show_size_unit = "kB" ;
# use user-supplied captions (-c)
my $use_caption_file = 0 ;

# Various
# options to be passed to convert (--con)
my $convert_options = "" ;
# makes everything world-readable (-www)
my $www_access_rights = 0 ;

######################################################################
# create usage now to use defaults values

my $usage = << "END_OF_USAGE";
This is llgal 0.1 the Loulous HTML image slide show generator.
Syntax:  llgal [-option -option ...]
Options:  -a              write image sizes under thumbnails on index page
          --ad            like -a, but write only the image dimensions
          --as            like -a, but write only the file size (in kbytes)
          --asu <s>       change file size unit ($show_size_unit)
          --bigy <n>      like -y, use it if you have very large image files
          -c              first generate and then use captions
          -C              use file names as captions
          --ce            use exiftags as captions
          --con <s>       options to pass to convert (e.g. -quality N)
          -d <dir>        operate on files in directory <dir> ($destination_dir)
          -i <file>       name of the main thumbnail index file ($index_filename)
          -k              use the image captions for the HTML slide titles
          -n              use image file names for the HTML slide files
          -p <n>          cellpadding value of thumbnail index tables ($index_cellpadding)
          -r              omit the film reel effect altogether
          -s              make no HTML slides, link thumbnails to images
          --sp <s>        sets the slide image prefix (\"$slide_filenameprefix\")
          -t <n>          height of the film reel tiled image ($tile_height)
          --title <s>     string to substitute for TITLE in index template
          --tp <s>        sets the thumbnail image prefix (\"$thumb_filenameprefix\")
          -u              write captions under thumbnails on index page
          -w <n>          rows in thumbnail index are at most <n> images wide ($thumbnails_per_row)
          --www           make all llgal files world-readable
          --wx <n>        rows in thumbnail index are at most <n> pixels wide
          -x              omit the image count from the captions
          --xy <n>        scale thumbs to <n> pixels in their longer dimension
          -y <n>          scale all thumbnails to the same height <n> ($thumbnail_height_max)
          --clean         remove all generated files
          --cleanall      remove all generated and user modified files
          --config <s>    pass an additional configuration files
          --option <s>    pass an additional option as in configuration files
          -f              force thumbnail and scaled slide regeneration
          --gencfg <file> generate the configuration <file>
          -h, --help      displays this brief help
Note:      default values are given in parentheses (where applicable).
Author:    Brice Goglin <Brice.Goglin\@ens-lyon.org>
END_OF_USAGE

######################################################################
# parse options in config files

sub process_option {
	$_ = shift ;
	chomp $_ ;
# llgal directories
    	if (/^llgal_share_dir\s*=\s*"(.+)"$/) {
	    $llgal_share_dir = $1 ;
	} elsif (/^user_share_dir\s*=\s*"(\/.+)"$/) {
	    $user_share_dir = $1 ;
	} elsif (/^user_share_dir\s*=\s*"(.+)"$/) {
	    $user_share_dir = $ENV{HOME}."/".$1 ;
# Name of generic llgal files
	} elsif (/^css_filename\s*=\s*"(.+)"$/) {
	    $css_filename = $1 ;
	} elsif (/^filmtile_filename\s*=\s*"(.+)"$/) {
	    $filmtile_filename = $1 ;
	} elsif (/^indextemplate_filename\s*=\s*"(.+)"$/) {
	    $indextemplate_filename = $1 ;
	} elsif (/^slidetemplate_filename\s*=\s*"(.+)"$/) {
	    $slidetemplate_filename = $1 ;
# Location and name of generated files
	} elsif (/^destination_dir\s*=\s*"(.+)"$/) {
	    $destination_dir = $1 ;
	} elsif (/^local_llgal_dir\s*=\s*"(.+)"$/) {
	    $local_llgal_dir = $1 ;
	} elsif (/^slide_filenameprefix\s*=\s*"(.+)"$/) {
	    $slide_filenameprefix = $1 ;
	} elsif (/^thumb_filenameprefix\s*=\s*"(.+)"$/) {
	    $thumb_filenameprefix = $1 ;
# Index
	} elsif (/^index_filename\s*=\s*"(.+)"$/) {
	    $index_filename = $1 ;
	} elsif (/^index_title\s*=\s*"(.*)"$/) {
	    $index_title = $1 ;
	} elsif (/^index_cellpadding\s*=\s*(.+)$/) { # >= 0, -1 for default
	    $index_cellpadding = $1 ;
	} elsif (/^pixels_per_row\s*=\s*(.+)$/) { # > 0, 0 for unlimited, -1 for default
	    $pixels_per_row = $1 ;
# Film effect
	} elsif (/^no_film_effect\s*=\s*(.+)$/) {
	    $no_film_effect = $1 ;
	} elsif (/^tile_height\s*=\s*(.+)$/) { # >= 0, -1 for default
	    $tile_height = $1 ;
# Thumbnails
	} elsif (/^thumbnail_height_max\s*=\s*(.+)$/) { # > 0, -1 for default
	    $thumbnail_height_max = $1 ;
	} elsif (/^thumbnail_width_max\s*=\s*(.+)$/) { # > 0, 0 for unlimited, -1 for default
	    $thumbnail_width_max = $1 ;
	} elsif (/^thumbnails_per_row\s*=\s*(.+)$/) { # > 0, 0 for unlimited, -1 for default
	    $thumbnails_per_row = $1 ;
# Slides
	} elsif (/^make_no_slides\s*=\s*(.+)$/) {
	    $make_no_slides = $1 ;
	} elsif (/^no_slide_counter\s*=\s*(.+)$/) {
	    $no_slide_counter = $1 ;
	} elsif (/^slide_height_max\s*=\s*(.+)$/) { # > 0, 0 for unlimited, -1 for default
	    $slide_height_max = $1 ;
	} elsif (/^slidename_from_filename\s*=\s*(.+)$/) {
	    $slidename_from_filename = $1 ;
	} elsif (/^slidetitle_from_caption\s*=\s*(.+)$/) {
	    $slidetitle_from_caption = $1 ;
	} elsif (/^text_slide_width\s*=\s*(.+)$/) { # > 0, -1 for default
	    $text_slide_width = $1 ;
	} elsif (/^text_slide_height\s*=\s*(.+)$/) { # > 0, -1 for default
	    $text_slide_height = $1 ;
# Captions
	} elsif (/^captions_filename\s*=\s*"(.+)"$/) {
	    $captions_filename = $1 ;
	} elsif (/^caption_from_exif\s*=\s*(.+)$/) {
	    $caption_from_exif = $1 ;
	} elsif (/^caption_from_filename\s*=\s*(.+)$/) {
	    $caption_from_filename = $1 ;
	} elsif (/^caption_removal_line\s*=\s*"(.+)"$/) {
	    $caption_removal_line = $1 ;
	} elsif (/^caption_under_thumbnails\s*=\s*(.+)$/) {
	    $caption_under_thumbnails = $1 ;
	} elsif (/^show_dimensions\s*=\s*(.+)$/) {
	    $show_dimensions = $1 ;
	} elsif (/^show_size\s*=\s*(.+)$/) {
	    $show_size = $1 ;
	} elsif (/^show_size_unit\s*=\s*"(.*)"$/) {
	    $show_size_unit = $1 ;
	} elsif (/^use_caption_file\s*=\s*(.+)$/) {
	    $use_caption_file = $1 ;
# Various
	} elsif (/^additional_configuration_file\s*=\s*"(.+)"/) {
	    push (@additional_config_files, $1) ;
	} elsif (/^convert_options\s*=\s*"(.*)"$/) {
	    $convert_options .= " ".$1 ;
	} elsif (/^www_access_rights\s*=\s*(.+)$/) {
	    $www_access_rights = $1 ;
# Error
	} elsif (/^[^#]/ && !/^(\s*)$/) {
	    die "Unrecognized option line: ". $_ ;
	}
}

# parse config files
foreach my $conf ( @config_files ) {
    open CONF, $conf ;
    while (<CONF>) {
	process_option $_ ;
    }
   close CONF ;
}

foreach my $conf ( @additional_config_files ) {
    die "Cannot find additional configuration files \"$conf\".\n" unless (-r "$conf") ;
    open CONF, $conf ;
    while (<CONF>) {
	process_option $_ ;
    }
   close CONF ;
}

######################################################################
# process command-line arguments (overriding defaults above)
GetOptions(
	   'a'		=> sub { $show_dimensions = $show_size = 1 ; },
	   'ad'		=> \$show_dimensions,
	   'as'		=> \$show_size,
	   'asu=s'	=> \$show_size_unit,
	   'c'		=> \$use_caption_file,
	   'C'		=> \$caption_from_filename,
	   'ce'		=> \$caption_from_exif,
	   'i=s'	=> \$index_filename,
	   'k'		=> \$slidetitle_from_caption,
	   'n'		=> \$slidename_from_filename,
	   'p=i'	=> \$index_cellpadding,
           'r'		=> \$no_film_effect,
	   's'		=> \$make_no_slides,
	   't=i'	=> \$tile_height,
	   'u'		=> \$caption_under_thumbnails,
	   'w=i'	=> \$thumbnails_per_row,
	   'x'		=> \$no_slide_counter,
	   'y=i'	=> \$thumbnail_height_max,
	   'bigy=i'	=> \$slide_height_max,
           'con=s'	=> sub { shift ; $convert_options .= " ".shift ; },
	   'sp=s'	=> \$slide_filenameprefix,
	   'title=s'	=> \$index_title,
           'tp=s'	=> \$thumb_filenameprefix,
	   'www'	=> \$www_access_rights,
	   'wx=i'	=> \$pixels_per_row,
	   'xy=i'	=> sub { shift ; $thumbnail_width_max = $thumbnail_height_max = shift ; },
	   'option=s'	=> sub { shift ; process_option (shift) ; },
	) or die $usage ;

die $usage if ($help_asked) ;

######################################################################
# sanity checks and restore defaults of numerical options

sub is_integer {
    my $s = shift ;
    return $s eq int($s) ;
}

# thumbnail_width_max must be > 0 or 0 for unlimited
die "Please give an integer value for thumbnail width max\n"
    unless is_integer($thumbnail_width_max) ;
if ($thumbnail_width_max < 0) {
    print "Thumbnail width max value < 0, restoring to default (".
	($thumbnail_width_max_default?$thumbnail_width_max_default:"unlimited") .")\n" ;
    $thumbnail_width_max = $thumbnail_width_max_default ;
}
die "Please give a positive thumbnail width max value (or 0 for unlimited)\n"
    unless ($thumbnail_width_max >= 0) ;

# thumbnail_height_max must be > 0
die "Please give an integer value for thumbnail height max\n"
    unless is_integer($thumbnail_height_max) ;
if ($thumbnail_height_max < 0) {
    print "Thumbnail height max value < 0, restoring to default ($thumbnail_height_max_default)\n" ;
    $thumbnail_height_max = $thumbnail_height_max_default ;
}
die "Please give a positive thumbnail height max value\n"
    unless ($thumbnail_height_max > 0) ;

# thumbnails_per_row must be > 0 or 0 for unlimited
die "Please give an integer value for thumbnails per row\n"
    unless is_integer($thumbnails_per_row) ;
if ($thumbnails_per_row < 0) {
    print "Thumbnails per row value < 0, restoring to default (".
	($thumbnails_per_row_default?$thumbnails_per_row_default:"unlimited") .")\n" ;
    $thumbnails_per_row = $thumbnails_per_row_default ;
}
die "Please give a positive thumbnails per row value (or 0 for unlimited)\n"
    unless ($thumbnails_per_row >= 0) ;

# pixels_per_row must be > 0 or 0 for unlimited
die "Please give an integer value for pixels per row\n"
    unless is_integer($pixels_per_row) ;
if ($pixels_per_row < 0) {
    print "Pixels per row value < 0, restoring to default (".
	($pixels_per_row_default?$pixels_per_row_default:"unlimited") .")\n" ;
    $pixels_per_row = $pixels_per_row_default ;
}
die "Please give a positive pixels per row value (or 0 for unlimited)\n"
    unless ($pixels_per_row >= 0) ;

# index_cellpadding must be >= 0
die "Please give an integer value for index cellpadding\n"
    unless is_integer($index_cellpadding) ;
if ($index_cellpadding < 0) {
    print "Index cellpadding value < 0, restoring to default ($index_cellpadding_default)\n" ;
    $index_cellpadding = $index_cellpadding_default ;
}
die "Please give a positive or null index cellpadding value\n"
    unless ($index_cellpadding >= 0) ;

# tile_height must be >= 0
die "Please give an integer value for tile height\n"
    unless is_integer($tile_height) ;
if ($tile_height < 0) {
    print "Tile height value < 0, restoring to default value ($tile_height_default)\n" ;
    $tile_height = $tile_height_default ;
}
die "Please give a positive or null tile height value\n"
    unless ($tile_height >= 0);

# text_slide_width must be > 0
die "Please give an integer value for text slide width\n"
    unless is_integer($text_slide_width) ;
if ($text_slide_width < 0) {
    print "Text slide width value < 0, restoring to default ($text_slide_width_default)\n" ;
    $text_slide_width = $text_slide_width_default ;
}
die "Please give a positive text slide width value\n"
    unless ($text_slide_width > 0) ;

# text_slide_height must be > 0
die "Please give an integer value for text slide height\n"
    unless is_integer($text_slide_height) ;
if ($text_slide_height < 0) {
    print "Text slide height value < 0, restoring to default ($text_slide_height_default)\n" ;
    $text_slide_height = $text_slide_height_default ;
}
die "Please give a positive text slide height value\n"
    unless ($text_slide_height > 0) ;

# slide_height_max must be > 0, 0 for unlimited
die "Please give an integer value for slide height max\n"
    unless is_integer($slide_height_max) ;
if ($slide_height_max < 0) {
    print "Slide height max value < 0, restoring to default (".
	($slide_height_max_default?$slide_height_max_default:"unlimited") .")\n" ;
    $slide_height_max = $slide_height_max_default ;
}
die "Please give a positive slide height max value (or 0 for unlimited)\n"
    unless ($slide_height_max >= 0) ;

# either pixels or thumbnails per row must be limited
die "Please limit pixels or thumbnails per row\n"
    unless $pixels_per_row > 0 or $thumbnails_per_row > 0 ;

######################################################################
# other sanity check

# cannot have --bigy and -s
die "Please choose between --bigy and -s\n"
    if ($slide_height_max && $make_no_slides) ;

# check a few string that have to be non-empty
die "Please give a non-empty llgal share directory\n"
    if ($llgal_share_dir eq "") ;
die "Please give a non-empty user share directory\n"
    if ($user_share_dir eq "") ;
die "Please give a non-empty CSS filename\n"
    if ($css_filename eq "") ;
die "Please give a non-empty film tile filename\n"
    if ($filmtile_filename eq "") ;
die "Please give a non-empty index template filename\n"
    if ($indextemplate_filename eq "");
die "Please give a non-empty slide template filename\n"
    if ($slidetemplate_filename eq "");
die "Please give a non-empty destination directory\n"
    if ($destination_dir eq "");
die "Please give a non-empty local llgal directory\n"
    if ($local_llgal_dir eq "");
die "Please give a non-empty slide filename prefix\n"
    if ($slide_filenameprefix eq "");
die "Please give a non-empty thumbnail filename prefix\n"
    if ($thumb_filenameprefix eq "");
die "Please give a non-empty index filename\n"
    if ($index_filename eq "");
die "Please give a non-empty caption filename\n"
    if ($captions_filename eq "");
die "Please give a non-empty caption removal line\n"
    if ($caption_removal_line eq "");

######################################################################
# prepare a few globals for later

# cleanup convert options
$convert_options =~ s/ +/ /g ;
$convert_options =~ s/ +$//g ;

# adapt text slide height in case of --bigy
if ($slide_height_max > 0) {
    $text_slide_width = $text_slide_width / $text_slide_height * $slide_height_max ;
    $text_slide_height = $slide_height_max ;
}

# thumbnail default size (for text and link slide especially)
my ($defaultthumbx, $defaultthumby) ;
if ($thumbnail_width_max > 0) {
    ($defaultthumbx, $defaultthumby) = ($thumbnail_width_max, $thumbnail_height_max) ;
} else {
    ($defaultthumbx, $defaultthumby) = ($thumbnail_height_max * 4/3, $thumbnail_height_max) ;
}

# convert options for thumbnails
my $thumbnail_convert_options;
if ($thumbnail_width_max > 0) {
    $thumbnail_convert_options = "-scale \"".$thumbnail_width_max."x".$thumbnail_height_max.">\"" ;
} else {
    $thumbnail_convert_options = "-scale x".$thumbnail_height_max ;
}
my $thumbnail_create_command = "convert  +profile '*' $convert_options $thumbnail_convert_options " ;

# convert options for slides
my $slide_create_command = "convert  +profile '*' $convert_options -scale x$slide_height_max " ;
my $slide_copy_command = "cp -f " ;

#####################################################################
# Main variables

# the whole entry list
# stored each as a hash table with type, filename, url, caption, text, xdim, ydim, kbytes, slide, slidexdim, slideydim, slidekbytes
my @entries ;
my $nentries ;
my $nofiles = 0 ;

my $TYPE_TXT = 0 ;
my $TYPE_LNK = 1 ;
my $TYPE_IMG = 2 ;
my $TYPE_MVI = 3 ;
my $TYPE_DIR = 4 ;

# headers and footers
my @headers = () ;
my @footers = () ;

######################################################################
# find generic llgal file
sub find_generic_llgal_file {
    my ($filename, $check) = (shift, shift) ;
    if (-r "$user_share_dir/$filename") {
	return $user_share_dir ;
    } else {
	die "$llgal_share_dir cannot be read or does not exist.\nPlease install llgal properly.\n"
	    unless (-r $llgal_share_dir || !$check) ;
	die "$llgal_share_dir/$filename cannot be read or does not exist.\nPlease install llgal properly.\n"
	    unless (-r "$llgal_share_dir/$filename" || !$check) ;
        return $llgal_share_dir ;
    }
}

# get generic llgal file
sub get_generic_llgal_file {
    my ($filename) = (shift) ;
    if (-e "$destination_dir/$local_llgal_dir/$filename") {
	print "Found $filename in $destination_dir/$local_llgal_dir/ ... using it.\n" ;
    } else {
	my $srcdir = find_generic_llgal_file ($filename, 1);
	print "No $filename in $destination_dir/$local_llgal_dir/ ... getting a copy from $srcdir\n" ;
	system("cp -f \"$srcdir/$filename\" \"$destination_dir/$local_llgal_dir/$filename\"") ;
    }
}

######################################################################
# -clean and -cleanall option

sub clean_files {
    my $all = shift ;
    my $notdeleted = 0 ;

    die "Can't open directory $destination_dir\n" if (!-r $destination_dir) ;

    opendir DIR, "$destination_dir/$local_llgal_dir" ;
    while ($_ = readdir DIR) {
	if (/^$thumb_filenameprefix/ or /^$slide_filenameprefix/) {
	    unlink "$destination_dir/$local_llgal_dir/$_";
	} elsif (/^$indextemplate_filename$/
	    or /^$slidetemplate_filename$/
	    or /^$filmtile_filename$/
	    or /^$css_filename$/) {
	    my $original = (find_generic_llgal_file $_, 0)."/".$_ ;
	    if ($all or !system("diff -q \"$destination_dir/$local_llgal_dir/$_\" \"$original\" > /dev/null 2>&1")) {
		unlink "$destination_dir/$local_llgal_dir/$_";
	    } else {
		print "(preserved $_) " ;
	    }
	} elsif (/^$captions_filename$/) {
	    if ($all or !system("grep -q \"$caption_removal_line\" \"$destination_dir/$local_llgal_dir/$_\"")) {
		unlink "$destination_dir/$local_llgal_dir/$_";
	    } else {
		print "(preserved $_) " ;
	    }
	} else {
	    $notdeleted++;
	}
    }
    closedir DIR ;
    if ($notdeleted <= 2 && $all) {
	rmdir "$destination_dir/$local_llgal_dir" ;
    }

    opendir DIR, "$destination_dir" ;
    while ($_ = readdir DIR ) {
	if (/.html$/) {
	    unlink "$destination_dir/$_" ;
	}
    }
    closedir DIR ;
}

if ($clean_asked) {
    print "Removing all non-modified llgal files: ";
    clean_files 0 ;
    print "done!\n";
    exit 0 ;
}

if ($cleanall_asked) {
    print "Removing all llgal files: ";
    clean_files 1 ;
    print "done!\n";
    exit 0;
}

###################################################################################
# generating captions based on filename
sub make_filename_caption {
    my $filename = shift ;
    return $filename;
}

# generating captions based on exiftags
sub make_exiftags_caption {
    my $file = shift ;
    my $caption = `exifcom $file 2> /dev/null` ;
    chomp $caption ;
    return $caption ;
}

# generating captions
sub make_caption {
    my $filename = shift ;
    my $file = shift ;
    my $type = shift ;
    my $caption = "" ;
    if ($caption_from_exif && $type == $TYPE_IMG) {
	$caption = make_exiftags_caption ($file) ;
    }
    if ($caption_from_filename && $caption eq "") {
	$caption = make_filename_caption ($filename) ;
    }
    return $caption ;
}

# generating entry table from files in target directory
sub get_entries {
    # load up image files from $destination_dir into array @imgfiles
    opendir DIR, $destination_dir or die "Can't open directory $destination_dir\n";

    # find and read all jp(e)g, gif and png files
    my @imgfiles = () ;
    push @imgfiles, grep((!/^\.thumb/ and !/^\.slide/ and !/^\.tile/ and /\.jpe?g$/i), readdir DIR) ;
    rewinddir DIR ;   # this is CRUCIAL here!!!
    push @imgfiles, grep((!/^\.thumb/ and !/^\.slide/ and !/^\.tile/ and /\.gif$/i), readdir DIR) ;
    rewinddir DIR ;   # this is CRUCIAL here!!!
    push @imgfiles, grep((!/^\.thumb/ and !/^\.slide/ and !/^\.tile/ and /\.png$/i), readdir DIR) ;
    rewinddir DIR ;   # this is CRUCIAL here!!!

    # find and read all mp(e)g and avi files
    my @mvifiles = () ;
    push @mvifiles, grep((!/^\.thumb/ and !/^\.slide/ and !/^\.tile/ and /\.mpe?g$/i), readdir DIR) ;
    rewinddir DIR ;   # this is CRUCIAL here!!!
    push @mvifiles, grep((!/^\.thumb/ and !/^\.slide/ and !/^\.tile/ and /\.avi$/i), readdir DIR) ;
    rewinddir DIR ;   # this is CRUCIAL here!!!

    # find all subdirectories
    my @subdirs = () ;
    while ($_ = readdir DIR) {
	if (/^[^.]/ && -d "$destination_dir/$_") {
	    push @subdirs, $_ ;
	}
    }

    closedir DIR ;

    # add files to entries
    while (@imgfiles) {
	my $file = shift @imgfiles;
	my $entry ;
	my @parts = split (/\./, $file) ;
	my $ext = pop @parts ;
	my $filename = join (".", @parts) ;
	$entry->{type} = $TYPE_IMG ;
	$entry->{filename} = $filename ;
	$entry->{url} = $file ;
	$entry->{caption} = make_caption ($filename, $file, $TYPE_IMG) ;
	push @entries, $entry ;
    }
    
    while (@mvifiles) {
        my $file = shift @mvifiles ;
	my $entry ;
	my @parts = split (/\./, $file) ;
	my $ext = pop @parts ;
	my $filename = join (".", @parts) ;
	$entry->{type} = $TYPE_MVI ;
	$entry->{filename} = $filename ;
	$entry->{url} = $file ;
	$entry->{caption} = make_caption ($filename, $file, $TYPE_MVI) ;
	$entry->{text} = make_filename_caption ($filename) ;
	push @entries, $entry ;
    }

    while (@subdirs) {
	my $dirname = shift @subdirs ;
	my $entry ;
	$entry->{type} = $TYPE_DIR ;
	$entry->{filename} = $dirname ;
	$entry->{url} = $dirname ;
	$entry->{caption} = make_caption ($dirname, $dirname, $TYPE_DIR) ;
	$entry->{text} = make_filename_caption ($dirname) ;
	push @entries, $entry ;
    }

    # sort alphabetically, by file name
    @entries = sort { $a->{filename} <=> $b->{filename} } @entries ;
    # how many total files
    $nentries = @entries ;

    die "Please select more files for your slide show!\n" if ($nentries <= 1);
}

# End of helper functions
######################################################################

#######################################################################
# Create local subdirectory to place all llgal files

if (!-r "$destination_dir/$local_llgal_dir") {
    mkdir "$destination_dir/$local_llgal_dir"
	or die "Cannot create $destination_dir/$local_llgal_dir directory" ;
}

#######################################################################
# If the -c option was supplied let user specify captions, else see below
if ($use_caption_file) {
    if (! -r "$destination_dir/$local_llgal_dir/$captions_filename") {
	get_entries ;

	# create and fill $captions_filename file if it doesn't exist
	print "Found $nentries files in " .
	    ($destination_dir eq "." ? "current directory" : "directory $destination_dir") ."\n" ;
	open(CAP, ">$destination_dir/$local_llgal_dir/$captions_filename")
	    or die "Can't create $destination_dir/$local_llgal_dir/$captions_filename file\n" ;
	print "Creating the $captions_filename file...\n" ;
	print CAP "# This is llgal's $captions_filename file, first generated ", scalar localtime, ".\n" ;
	print CAP "# TITLE: title of the index\n" ;
	print CAP "# INDEXHEAD: one header line in the index\n" ;
	print CAP "# INDEXFOOT: one header line in the index\n" ;
	print CAP "# TXT: text ---- caption\n" ;
	print CAP "# IMG: imagefile.{gif,png,jpg} ---- caption\n" ;
	print CAP "# LNK: url ---- slide link text ---- caption\n" ;
	print CAP "# MVI: movie.{avi,mpg,mpeg} ---- slide link text ---- caption\n" ;
	print CAP "\n" ;
	print CAP "# $caption_removal_line\n" ;
	print CAP "\n" ;

	for (my $i = 0; $i < $nentries; $i++) {
	    my $type = $entries[$i]->{type} ;
	    if ($type == $TYPE_IMG) {
		print CAP "IMG: ". $entries[$i]->{url} ." ---- ". $entries[$i]->{caption} ."\n";
	    } elsif ($type == $TYPE_MVI) {
	        print CAP "MVI: " . $entries[$i]->{url} ." ---- ". $entries[$i]->{text} ." ---- ". $entries[$i]->{caption} ."\n";
	    } elsif ($type == $TYPE_DIR) {
	        print CAP "DIR: " . $entries[$i]->{url} ." ---- ". $entries[$i]->{text} ." ---- ". $entries[$i]->{caption} ."\n";
	    }
	}
	close(CAP);
	die "Now edit the $captions_filename file to your liking and rerun llgal -c\n";
    } else {
	# read in files specified in the .captions file if it exists
	print "Reading the $captions_filename file ... ";

	open(CAP,"$destination_dir/$local_llgal_dir/$captions_filename") or die "Can't open $destination_dir/$local_llgal_dir/$captions_filename file\n";
	my $line;
	while (defined($line = <CAP>)) {
	    chomp($line); $line =~ s/^\s*//; $line =~ s/\s\(\s*\)$/\1/;
	    # only lines that don't start with # and are not empty
	    if (!($line =~ m/^\#/) && !($line =~ /^$/)) {
		if ($line =~ m/TITLE:\s*(.*)\s*/) {
		    # title
		    $index_title = $1;

		} elsif ($line =~ m/^INDEXHEAD:\s+(.*)\s*$/) {
		    # header for the index
		    push @headers, $1 ;

		} elsif ($line =~ m/^INDEXFOOT:\s+(.*)\s*$/) {
		    # footer for the index
		    push @footers, $1 ;

		} else {
		    # that's a slide, create its entry
		    my $entry;
		    if ($line =~ m/^TXT:\s+(.*)\s+----\s+(.*)\s*$/) {
			# text slide
			$entry->{type} = $TYPE_TXT ;
			$entry->{filename} = "NOFILE".($nofiles++) ;
			$entry->{caption} = $2 ;
			$entry->{text} = $1 ;

		    } elsif ($line =~ m/^LNK:\s+(.+)\s+----\s+(.+)\s+----\s+(.*)\s*$/) {
			# link slide
			$entry->{type} = $TYPE_LNK ;
			$entry->{filename} = "NOFILE".($nofiles++) ;
			$entry->{url} = $1 ;
			$entry->{caption} = $3 ;
			$entry->{text} = $2 ;

		    } elsif ($line =~ m/^MVI:\s+(.+)\.(.+)\s+----\s+(.+)\s+----\s+(.*)\s*$/) {
			# link slide
			$entry->{type} = $TYPE_MVI ;
			$entry->{filename} = $1 ;
			$entry->{url} = $1 .".". $2 ;
			$entry->{caption} = $4 ;
			$entry->{text} = $3 ;

		    } elsif ($line =~ m/^DIR:\s+(.+)\s+----\s+(.+)\s+----\s+(.*)\s*$/) {
			# directory slide
			$entry->{type} = $TYPE_DIR ;
			$entry->{filename} = $1 ;
			$entry->{url} = $1 ;
			$entry->{caption} = $3 ;
			$entry->{text} = $2 ;

		    } elsif ($line =~ m/^IMG:\s+(.+)\.(.+)\s+----\s+(.*)\s*$/
			     or $line =~ m/\s+(.+)\.(.+)\s+----\s+(.*)\s*^/) {
			# image slide (default)
			$entry->{type} = $TYPE_IMG ;
			$entry->{filename} = $1 ;
			$entry->{url} = $1 .".". $2 ;
			$entry->{caption} = $3 ;

		    } else {
			die "Unrecognized line in caption file.\n" ;
		    }

		    # really add this entry
		    push @entries, $entry ;
		}
	    }
	}
	close(CAP);
	$nentries = @entries ;
	print "found $nentries image files.\n";
    }
} else {
    get_entries ;
    print "Found $nentries files in directory $destination_dir\n";
}

#######################################################################
# Create thumbnails

print "Creating thumbnails: ";
# compute the thumbnail and store their size
for (my $i = 0; $i < $nentries; $i++) {
    my ($x,$y) = ($defaultthumbx,$defaultthumby);
    if ($entries[$i]->{type} == $TYPE_IMG) {
	my $filename = "$destination_dir/$entries[$i]->{url}" ;
	die "Can't open $filename\n" unless (-r $filename) ;
	my $thumb_filename = "$destination_dir/$local_llgal_dir/$thumb_filenameprefix$entries[$i]->{url}" ;
	if ((! -e $thumb_filename) or $force_regen_asked) {
	    my $output = `$thumbnail_create_command "$filename" "$thumb_filename" 2>&1` ;
	    chomp $output ;
	    die "Failed ($output)\n" if $? ;
	    print "." ;
	}
	($x,$y) = imgsize($thumb_filename) ;
    }
    $entries[$i]->{thumbxdim} = $x ;
    $entries[$i]->{thumbydim} = $y ;    
}
print " done!\n";

#######################################################################
# Determine image file sizes

print "Determining image sizes: ";
for (my $i = 0; $i < $nentries; $i++) {
    if ($entries[$i]->{type} == $TYPE_IMG || $entries[$i]->{type} == $TYPE_MVI) {
	my $filename = "$destination_dir/$entries[$i]->{url}" ;
	die "Can't open $filename\n" unless (-r $filename);
	if ($entries[$i]->{type} == $TYPE_IMG) {
	    my ($x,$y) = imgsize($filename) ;
	    $entries[$i]->{xdim} = $x ;
	    $entries[$i]->{ydim} = $y ;
	    $entries[$i]->{slidexdim} = $x ;
	    $entries[$i]->{slideydim} = $y ;
	}
	$entries[$i]->{kbytes} = ((stat($filename))[7])>>10 ;
	$entries[$i]->{slidekbytes} = ((stat($filename))[7])>>10 ;
	print "." ;
    }
}
print " done!\n";

#######################################################################
# Scale down slides if the --bigy <n> option was given

if ($slide_height_max > 0 and !($make_no_slides)) {
    print "Scaling down big slides and determining new slide sizes: ";
    for (my $i = 0; $i < $nentries; $i++) {
	if ($entries[$i]->{type} == $TYPE_IMG) {
	    my $filename = "$destination_dir/$entries[$i]->{url}" ;
	    die "Can't open $filename\n" unless (-r $filename);
	    my $slide_filename = "$destination_dir/$local_llgal_dir/$slide_filenameprefix$entries[$i]->{url}" ;
	    my ($x,$y) ;
	    if ((! -e $slide_filename) or $force_regen_asked) {
		# only scale down, never up.
		($x,$y) = imgsize($filename);
		my $output ;
		if ($y <= $slide_height_max) {
		    $output = `$slide_copy_command "$filename" "$slide_filename" 2>&1` ;
		} else {
		    $output = `$slide_create_command "$filename" "$slide_filename" 2>&1` ;
		}
		chomp $output ;
		die "Failed ($output)\n" if $? ;
		print "." ;
	    }
            ($x,$y) = imgsize($slide_filename);
	    $entries[$i]->{slidexdim} = $x;
	    $entries[$i]->{slideydim} = $y;
	    $entries[$i]->{slidekbytes} = ((stat($slide_filename))[7])>>10 ;
	}
    }
    print " done!\n";
}

#######################################################################
# Get the css
get_generic_llgal_file ($css_filename) ;

#######################################################################
# Create the individual slide show files

if ($make_no_slides) {
    print "Linking thumbnails directly to image files...  Making no html slides.\n";
} else {
    # create slide filenames
    if ($slidename_from_filename) {
	# use filename to generated slide name
	for (my $i = 0; $i < $nentries; $i++) {
	    $entries[$i]->{slide} = $entries[$i]->{filename} . ".html" ;
	}
    } else {
	# use number to generated slide name
	for (my $i = 0; $i < $nentries; $i++) {
	    $entries[$i]->{slide} = $i+1 . ".html" ;
	}
    }

    # remove old .html files
    system("rm -f \"$destination_dir/$local_llgal_dir/*.html\"");

    # get the slide template
    get_generic_llgal_file ($slidetemplate_filename) ;

    # create slides
    print "Creating individual slides: ";
    for (my $i = 0; $i < $nentries; $i++) {
	open(SR,"$destination_dir/$local_llgal_dir/$slidetemplate_filename") or die "Can't open the slide template file\n";
	open(SW,">$destination_dir/$entries[$i]->{slide}") or die "Can't create slide file\n";
	print ".";

	my $type = $entries[$i]->{type} ;

	my $altname ;
	if ($slidetitle_from_caption) {	# use image caption for the image alternative
	    $altname = "$entries[$i]->{filename} - $entries[$i]->{caption}" ;
	} else {	# otherwise use the image name (strip suffix)
	    $altname = $entries[$i]->{filename};
	}

	my $title ;
	if ($slidetitle_from_caption) {	# use image caption for the HTML slide title
	    $title = $entries[$i]->{caption} ;
	} else {	# otherwise use the image name (strip suffix)
	    $title = $entries[$i]->{filename};
	}

	my $line;
	while (defined($line = <SR>)) {
	    $line =~ s/<!--SLIDE-TITLE-->/$title/g;
	    $line =~ s/<!--TITLE-->/$index_title/g;
	    $line =~ s/<!--CSS-->/$local_llgal_dir\/$css_filename/g;

	    if ($line =~ m/<!--THIS-SLIDE-STYLE-->/g) {
		if ($type == $TYPE_TXT || $type == $TYPE_LNK || $type == $TYPE_MVI || $type == $TYPE_DIR) {
		    $line =~ s/<!--THIS-SLIDE-STYLE-->/text-slide" style="width: ${text_slide_width}px; height: ${text_slide_height}px;/ ;
		} else {
		    $line =~ s/<!--THIS-SLIDE-STYLE-->/image-slide/ ;
		}
	    }

	    if ($line =~ m/<!--THIS-SLIDE-->/g) {
		if ($type == $TYPE_TXT) {
		    # text slide
		    $line =~ s/<!--THIS-SLIDE-->/$entries[$i]->{text}/ ;
		} elsif ($type == $TYPE_LNK || $type == $TYPE_MVI || $type == $TYPE_DIR) {
		    # link or movie or directory slide
		    $line =~ s/<!--THIS-SLIDE-->/<a href="$entries[$i]->{url}">$entries[$i]->{text}<\/a>/ ;
		} elsif ($type == $TYPE_IMG) {
		    my $file = $entries[$i]->{url} ;
		    if ($slide_height_max) {
			# image slide with link to the real image
			$line =~ s/<!--THIS-SLIDE-->/<a href="$file"><img src="$local_llgal_dir\/$slide_filenameprefix$file" alt="$altname" title="click to see full-size ($altname)" \/><\/a>/ ;
		    } else {
			# image slide with the real image
			$line =~ s/<!--THIS-SLIDE-->/<img src="$file" alt="$altname" title="$altname" \/>/g ;
		    }
		} else {
		    die "Unknown type $type.\n" ;
		}
	    }

	    # add the caption, with the image counter unless -x is specified
	    my $imagecaption ;
	    if ($no_slide_counter) {
		$imagecaption = $entries[$i]->{caption} ;
	    } else{
		$imagecaption = $entries[$i]->{caption} . "&nbsp;&nbsp;&nbsp;(" . ($i+1) ."/$nentries)" if (!$no_slide_counter) ;
	    }

	    # add dimensions and size to the caption
	    if ($slide_height_max and ($show_dimensions or $show_size) and ($type == $TYPE_IMG || $type == $TYPE_MVI)) {
		my $printdim = "$entries[$i]->{xdim}x$entries[$i]->{ydim}" ;
		my $printsize = "$entries[$i]->{kbytes}$show_size_unit" ;
		if ($show_dimensions && $show_size && $type == $TYPE_IMG) {
		    $imagecaption .= "&nbsp;&nbsp;&nbsp;" . "$printdim ($printsize)" ;
		} elsif ($show_size) {
		    $imagecaption .= "&nbsp;&nbsp;&nbsp;" . $printsize ;
		} elsif ($show_dimensions) {
		    $imagecaption .= "&nbsp;&nbsp;&nbsp;" . $printdim if $type == $TYPE_IMG ;
		}
	    }

	    $line =~ s/<!--IMAGE-CAPTION-->/$imagecaption/g ;
	    $line =~ s/<!--INDEX-FILE-->/$index_filename/g ;
	    $line =~ s/<!--THIS-SLIDE-->/$entries[$i]->{slide}/g ;

	    # process PREV/NEXT SLIDE
	    my $prev ;
	    my $next ;
	    if ($slidetitle_from_caption) { # use caption for title attribute
		$prev=$entries[$i-1]->{caption} ;
		$next=$entries[($i==$nentries-1?0:$i+1)]->{caption} ;
	    } else { # otherwise use the image name (strip suffix)
		$prev=$entries[$i-1]->{filename} ;
		$next=$entries[($i==$nentries-1?0:$i+1)]->{filename} ;
	    }
	    $line =~ s/<!--PREV-SLIDE-->/\"$entries[$i-1]->{slide}\" title=\"$prev\"/g ;
	    $line =~ s/<!--NEXT-SLIDE-->/\"$entries[($i==$nentries-1?0:$i+1)]->{slide}\" title=\"$next\"/g ;
			
	    # output the line
	    print SW "$line" ;
	}
	close(SW) ;
	close(SR) ;
    }
    print " done!\n" ;
}

#######################################################################
# Get the film tile file for the index
if ($no_film_effect) {
    print "Omitting film reel effect.\n" ;
} else {
    get_generic_llgal_file ($filmtile_filename) ;
}

# rescale the tiled image if the -t switch was called but -r wasn't
if (! $no_film_effect) {
    my $tileh = (imgsize("$destination_dir/$local_llgal_dir/$filmtile_filename"))[1] ;
    system("mogrify -scale x$tile_height $destination_dir/$local_llgal_dir/$filmtile_filename") if ($tile_height != $tileh) ;
}

#######################################################################
# Get the indextemplate
get_generic_llgal_file ($indextemplate_filename) ;

#######################################################################
# Creating the index file

print "Creating the $index_filename file: " ;
open(IXR, "$destination_dir/$local_llgal_dir/$indextemplate_filename") or die "Can't open the index template file\n" ;
open(IXW, ">$destination_dir/$index_filename") or die "Can't create main $index_filename file\n" ;

# headers
my $line ;
while (defined($line = <IXR>)) {
    if ($line =~ m/<!--HEADERS-->/) {
	foreach my $header (@headers) {
	    print IXW "    <div class=\"header\">" . $header . "</div>\n" ;
	}
    } else {
	$line =~ s/LLGAL-OPTIONS/@llgal_options/g ;
        $line =~ s/<!--TITLE-->/$index_title/g ;
	$line =~ s/<!--CSS-->/$local_llgal_dir\/$css_filename/g;
	print IXW "$line";
# stop at <!-- ********** -->
	last if ($line =~ m/\*{10}/) ;
    }
}

# for each row
my $num;
my $forced_width_warning = 0;
for (my $i = 0; $i < $nentries; $i += $num) {
    $num = 0;

# figure out how many to put in next row.
    my $width = 0 ;
    while ( ($i+$num < $nentries)
	    && (!$thumbnails_per_row or $num < $thumbnails_per_row)
	    && (!$pixels_per_row or $width < $pixels_per_row) ) {
	$width += $entries[$num+$i]->{thumbxdim} ;
	$num++ ;
	# add cellpadding
	$width += $index_cellpadding ;
    }
    if ($pixels_per_row > 0 && $width > $pixels_per_row) {
	if ($num >= 2) {
	    $num-- ;
	} else {
	    $forced_width_warning++ ;
	}
    }

# Now output the row of thumbnails.
    if ($no_film_effect) {
	print IXW "<table class=\"index\" style=\"border-spacing: ", $index_cellpadding, "px 0px;\">\n";
    } else {
	print IXW "<table class=\"index with-tile\" style=\"border-spacing: ", $index_cellpadding, "px 0px;\">\n";
    }
    print IXW "  <tr><td class=\"tiled\" style=\"height: ", $tile_height, "px;\" colspan=\"", ($no_film_effect?$num:$num+2), "\">&nbsp;</td></tr>\n" unless ($no_film_effect);
    print IXW "  <tr>\n";
    print IXW "    <td class=\"thumb\">&nbsp;</td>\n" unless ($no_film_effect);
    for (my $j = 0; $j < $num; $j++) {
	my $type = $entries[$i+$j]->{type} ;
	my $width = $entries[$i+$j]->{thumbxdim} ;
	my $height = $entries[$i+$j]->{thumbydim} ;
	if ($type == $TYPE_TXT || $type == $TYPE_LNK || $type == $TYPE_MVI || $type == $TYPE_DIR) {
	    print IXW "    <td class=\"text-thumb\" style=\"width: ", $width, "px; height: ", $height, "px;\">\n" ;
            print IXW "      " ;
	    if ($type == $TYPE_TXT) {
		print IXW $entries[$i+$j]->{text} ;
	    } else {
		print IXW "<a href=\"" ;
		# always link to url instead of slides here
		print IXW $entries[$i+$j]->{url} ;
		print IXW "\">", $entries[$i+$j]->{text}, "</a>" ;
	    }
	    print IXW "</td>\n" ;
	} elsif ($type == $TYPE_IMG) {
	    print IXW "    <td class=\"thumb\" style=\"width: ", $width, "px; height: ", $height, "px;\">\n";
	    if ($make_no_slides) {
		print IXW "      <a href=\"", $entries[$i+$j]->{url}, "\">" ;
	    } else {
		print IXW "      <a href=\"", $entries[$i+$j]->{slide}, "\">" ;
	    }

	    my $altname;
	    if ($slidetitle_from_caption) {	# use image caption for image alternative
		$altname = "$entries[$i+$j]->{filename} - $entries[$i+$j]->{caption}" ;
	    } else {	# otherwise use the image name (strip suffix)
		$altname = $entries[$i+$j]->{filename};
	    }
	    
	    my $thumb = "$local_llgal_dir/$thumb_filenameprefix" . $entries[$i+$j]->{url} ;
	    print IXW "<img src=\"$thumb\" alt=\"$altname\" title=\"$altname\" />";
	    print IXW "</a></td>\n" ;
	} else {
	    die "Unknown type $type.\n" ;
	}
	print "." ;
    }
    print IXW "    <td class=\"thumb\">&nbsp;</td>\n" unless ($no_film_effect) ;
    print IXW "  </tr>\n" ;
    print IXW "  <tr><td class=\"tiled\" colspan=\"", $num+2, "\" style=\"", $tile_height, "\">&nbsp;</td></tr>\n" unless ($no_film_effect) ;
    if ($show_dimensions or $show_size) {
	print IXW "  <tr>\n";
	print IXW "    <td>&nbsp;</td>\n" unless ($no_film_effect) ;
	for (my $j = 0; $j < $num; $j++) {
	    print IXW "    <td class=\"thumb-dim\">" ;
	    my $type = $entries[$i+$j]->{type} ;
	    if ($type == $TYPE_IMG || $type == $TYPE_MVI) {
		my $printdim = "$entries[$i+$j]->{slidexdim}x$entries[$i+$j]->{slideydim}" ;
		my $printsize = "$entries[$i+$j]->{slidekbytes}$show_size_unit" ;
		if ($show_dimensions && $show_size && $type == $TYPE_IMG) {
		    print IXW "$printdim ($printsize)" ;
		} elsif ($show_size) {
		    print IXW "$printsize" ;
		} elsif ($show_dimensions) {
		    print IXW "$printdim" if $type == $TYPE_IMG ;
	    	}
	    }
	    print IXW "</td>\n" ;
	}
	print IXW "    <td>&nbsp;</td>\n" unless ($no_film_effect) ;
	print IXW "  </tr>\n" ;
    }
#	write image captions under images if option -u is given
    if ($caption_under_thumbnails) {
	print IXW "  <tr>\n" ;
	print IXW "<td>&nbsp;</td>\n" unless ($no_film_effect) ;
	for (my $j = 0; $j < $num; $j++) {
	    print IXW "    <td class=\"thumb-caption\">$entries[$i+$j]->{caption}</td>\n" ;
	}
	print IXW "  </tr>\n" ;
    }
    print IXW "</table>\n<br />\n" ;
}

# search next <!-- ********** -->
while (!(<IXR> =~ m/\*{10}/)) {};

# footers
while (defined($line = <IXR>)) {
    if ($line =~ m/<!--FOOTERS-->/) {
	foreach my $footer (@footers) {
	    print IXW "    <div class=\"footer\">" . $footer . "</div>\n";
	}
    } else {
	$line =~ s/<!--TITLE-->/$index_title/g;
	print IXW "$line";
    }
}
close(IXW);
close(IXR);
print " done!\n";

if ($forced_width_warning) {
    print "(Warning: Row width max ($pixels_per_row) was too low even for one single image per row. "
	. "Forced $forced_width_warning time". ($forced_width_warning>1?"s":"") .")\n" ;
}

#######################################################################
# If --www was invoked make all images world-readable at the END
if ($www_access_rights) {
    my $dir = "$destination_dir/";
    $dir = "" if $destination_dir eq ".";
    print "\nMaking all llgal files world-readable for WWW publishing...\n";
    print "chmod a+r $destination_dir/$local_llgal_dir/$css_filename\n";
    system("chmod a+r $destination_dir/$local_llgal_dir/$css_filename");
    print "chmod a+r $destination_dir/*.html\n";
    system("chmod a+r $destination_dir/*.html");
    print "chmod a+r $destination_dir/$local_llgal_dir/$thumb_filenameprefix*.*\n";
    system("chmod a+r $destination_dir/$local_llgal_dir/$thumb_filenameprefix*.*");
    print "chmod a+r $destination_dir/$local_llgal_dir/$slide_filenameprefix*.*\n";
    system("chmod a+r $destination_dir/$local_llgal_dir/$slide_filenameprefix*.*");
    print "chmod a+r $destination_dir/$local_llgal_dir/$filmtile_filename\n";
    system("chmod a+r $destination_dir/$local_llgal_dir/$filmtile_filename");
    print "chmod a+r ";
    for(my $i = 0; $i < $nentries; $i++) {
	next if ($entries[$i]->{type} != $TYPE_IMG
		 && $entries[$i]->{type} != $TYPE_MVI);
	my $file = $entries[$i]->{url} ;
	print "$dir$file ";
	system("chmod a+r $dir$file");
    }
    die "\nDone!\n";
}

#######################################################################
# If -g was invoked, generate a configuration file
if (defined $generate_config) {
    die "Cannot generate $generate_config which already exists."
	if -r "$generate_config" ;
    open NEWCFG, ">$generate_config"
	or die "Cannot open $generate_config configuration file.\n" ;
    print NEWCFG "# This is a llgal configuration file.\n" ;
    print NEWCFG "# It was automatically generated.\n" ;
    print NEWCFG "# You may modify and reuse it as you want.\n" ;
    print NEWCFG "\n" ;
    print NEWCFG "# llgal directories:\n" ;
    print NEWCFG "llgal_share_dir = \"$llgal_share_dir\"\n" ;
    print NEWCFG "user_share_dir = \"$user_share_dir\"\n" ;
    print NEWCFG "# Name of generic llgal files:\n" ;
    print NEWCFG "css_filename = \"$css_filename\"\n" ;
    print NEWCFG "filmtile_filename = \"$filmtile_filename\"\n" ;
    print NEWCFG "indextemplate_filename = \"$indextemplate_filename\"\n" ;
    print NEWCFG "slidetemplate_filename = \"$slidetemplate_filename\"\n" ;
    print NEWCFG "# Location and name of generated files:\n" ;
    print NEWCFG "destination_dir = \"$destination_dir\"\n" ;
    print NEWCFG "local_llgal_dir = \"$local_llgal_dir\"\n" ;
    print NEWCFG "slide_filenameprefix = \"$slide_filenameprefix\"\n" ;
    print NEWCFG "thumb_filenameprefix = \"$thumb_filenameprefix\"\n" ;
    print NEWCFG "# Index:\n" ;
    print NEWCFG "index_filename = \"$index_filename\"\n" ;
    print NEWCFG "index_title = \"$index_title\"\n" ;
    print NEWCFG "index_cellpadding = $index_cellpadding\n" ;
    print NEWCFG "pixels_per_row = $pixels_per_row\n" ;
    print NEWCFG "# Film effects:\n" ;
    print NEWCFG "no_film_effect = $no_film_effect\n" ;
    print NEWCFG "tile_height = $tile_height\n" ;
    print NEWCFG "# Thumbnails:\n" ;
    print NEWCFG "thumbnail_height_max = $thumbnail_height_max\n" ;
    print NEWCFG "thumbnail_width_max = $thumbnail_width_max\n" ;
    print NEWCFG "thumbnails_per_row = $thumbnails_per_row\n" ;
    print NEWCFG "# Slides:\n" ;
    print NEWCFG "make_no_slides = $make_no_slides\n" ;
    print NEWCFG "no_slide_counter = $no_slide_counter\n" ;
    print NEWCFG "slide_height_max = $slide_height_max\n" ;
    print NEWCFG "slidename_from_filename = $slidename_from_filename\n" ;
    print NEWCFG "slidetitle_from_caption = $slidetitle_from_caption\n" ;
    print NEWCFG "text_slide_height = $text_slide_height\n" ;
    print NEWCFG "text_slide_width = $text_slide_width\n" ;
    print NEWCFG "# Captions:\n" ;
    print NEWCFG "captions_filename = \"$captions_filename\"\n" ;
    print NEWCFG "caption_from_exif = $caption_from_exif\n" ;
    print NEWCFG "caption_from_filename = $caption_from_filename\n" ;
    print NEWCFG "caption_removal_line = \"$caption_removal_line\"\n" ;
    print NEWCFG "caption_under_thumbnails = $caption_under_thumbnails\n" ;
    print NEWCFG "show_dimensions = $show_dimensions\n" ;
    print NEWCFG "show_size = $show_size\n" ;
    print NEWCFG "show_size_unit = \"$show_size_unit\"\n" ;
    print NEWCFG "use_caption_file = $use_caption_file\n" ;
    print NEWCFG "# Various:\n" ;
    print NEWCFG "convert_options = \"$convert_options\"\n" ;
    print NEWCFG "www_access_rights = $www_access_rights\n" ;
    close NEWCFG ;
}
